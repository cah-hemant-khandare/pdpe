CREATE OR REPLACE PROCEDURE `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.SP_SMNTC_PRICING_ANALYTICS_FACT_ITEM_PRICE_HISTORY_CAPTURE`()
BEGIN
DECLARE
  v_attr_ingst_timestamp_src datetime; --DK: added for incremental load
DECLARE
  v_attr_ingst_timestamp_trgt datetime; --DK: added for incremental load
DECLARE
  v_start_time datetime; --HK: added
DECLARE
  v_end_time datetime; --HK addded
DECLARE
  v_part_date timestamp; --HK added
SET
  v_part_date = TIMESTAMP( DATE_SUB ( CURRENT_DATE(), INTERVAL 1 DAY ) ); --HK addded
SET
  v_start_time = current_datetime(); --DK: added for incremental load
SET
  v_attr_ingst_timestamp_src = (
  SELECT
    IFNULL( MAX(attr_ingst_timestamp),
      '1900-12-31T00:00:00')
  FROM
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX` );
SET
  v_attr_ingst_timestamp_trgt = (
  SELECT
    IFNULL( MAX(attr_ingst_timestamp_CHPDPE_CEITMPX),
      '1900-12-31T00:00:00')
  FROM
    `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST` );
MERGE INTO
  `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`
USING
  (
    --source identical data
  SELECT
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`CLIENT` AS join_key1,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`KUNNR` AS join_key2,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`VKORG` AS join_key3,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`VTWEG` AS join_key4,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`SPART` AS join_key5,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`MATNR` AS join_key6,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.*
  FROM
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`
  WHERE
    _PARTITIONTIME >= v_part_date
    AND v_attr_ingst_timestamp_src >= v_attr_ingst_timestamp_trgt --DK: added for incremental load
  UNION ALL
    --HK:Purpose of union all is to insert the updated records into the target as it creates two records first is with key's and second one is without keys
    --finding changed rows
  SELECT
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.*
  FROM
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`
  JOIN
    `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`
  ON
    ( `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.CLIENT = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CLIENT_CHPDPE_CEITMPX
      AND `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.KUNNR = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.KUNNR_CHPDPE_CEITMPX
      AND `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.VKORG = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.VKORG_CHPDPE_CEITMPX
      AND `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.VTWEG = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.VTWEG_CHPDPE_CEITMPX
      AND `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.SPART = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.SPART_CHPDPE_CEITMPX
      AND `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.MATNR = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.MATNR_CHPDPE_CEITMPX )
  WHERE
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`._PARTITIONTIME >= v_part_date --HK:added for partition
    AND v_attr_ingst_timestamp_src >= v_attr_ingst_timestamp_trgt --DK: added for incremental load
    AND `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_FLAG = 'Y'
    AND ( `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.CATALOG_PRICE <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_CATALOG_PRICE     -- Added IFNULL to consider the NULL value condition
      OR IFNULL(`datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.RTL_PRICE_ZVSR,
        999999999) <> IFNULL(`datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_RTL_PRICE_ZVSR,
        999999999)
      OR IFNULL(`datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.RTL_SELL_UNT_PRICE_ZVSU,
        999999999) <> IFNULL(`datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU,
        999999999)
      OR IFNULL(`datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.CONTRACT_PRICE_ZVBS,
        999999999) <> IFNULL(`datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_CONTRACT_PRICE_ZVBS,
        999999999)
      OR IFNULL(`datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.AFTR_RBT_PRICE_ZVBR,
        999999999) <> IFNULL(`datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_AFTR_RBT_PRICE_ZVBR,
        999999999) ) ) sub
ON
  sub.join_key1 = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CLIENT_CHPDPE_CEITMPX
  AND sub.join_key2 = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.KUNNR_CHPDPE_CEITMPX
  AND sub.join_key3 = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.VKORG_CHPDPE_CEITMPX
  AND sub.join_key4 = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.VTWEG_CHPDPE_CEITMPX
  AND sub.join_key5 = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.SPART_CHPDPE_CEITMPX
  AND sub.join_key6 = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.MATNR_CHPDPE_CEITMPX --udpdate CALC_EFFECTIVE_START_DATE, CALC_EFFECTIVE_END_DATE and CALC_CURRENT_FLAG
  WHEN MATCHED AND `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_FLAG = 'Y' AND ( sub.CATALOG_PRICE <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_CATALOG_PRICE OR IFNULL(sub.RTL_PRICE_ZVSR, 999999999) <> IFNULL(`datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_RTL_PRICE_ZVSR, 999999999) OR IFNULL(sub.RTL_SELL_UNT_PRICE_ZVSU, 999999999) <> IFNULL(`datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU, 999999999) OR IFNULL(sub.CONTRACT_PRICE_ZVBS, 999999999) <> IFNULL(`datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_CONTRACT_PRICE_ZVBS, 999999999) OR IFNULL(sub.AFTR_RBT_PRICE_ZVBR, 999999999) <> IFNULL(`datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_AFTR_RBT_PRICE_ZVBR, 999999999) ) THEN UPDATE SET CALC_EFFECTIVE_END_DATE = DATE_SUB ( CURRENT_DATE(), INTERVAL 1 DAY ), CALC_CURRENT_FLAG = 'N'
  WHEN NOT MATCHED
  THEN --insert as active records
INSERT
  ( CLIENT_CHPDPE_CEITMPX,
    KUNNR_CHPDPE_CEITMPX,
    VKORG_CHPDPE_CEITMPX,
    VTWEG_CHPDPE_CEITMPX,
    SPART_CHPDPE_CEITMPX,
    MATNR_CHPDPE_CEITMPX,
    CALC_EFFECTIVE_START_DATE,
    CALC_EFFECTIVE_END_DATE,
    CALC_CURRENT_FLAG,
    CATLG_PRICED_AT_KUNNR_CHPDPE_CEITMPX,
    RTL_PRICED_AT_KUNNR_CHPDPE_CEITMPX,
    SOURCE_DIVISION_CHPDPE_CEITMPX,
    PRICE_DIVISION_CHPDPE_CEITMPX,
    PRIMARY_BU_CHPDPE_CEITMPX,
    WERKS_CHPDPE_CEITMPX,
    WIN_CONTRACT_CHPDPE_CEITMPX,
    HIERCY_CHPDPE_CEITMPX,
    PREFR_CHPDPE_CEITMPX,
    PCTYP_CHPDPE_CEITMPX,
    CN_SEG_GROUP_CHPDPE_CEITMPX,
    NON_CN_SEG_GROUP_CHPDPE_CEITMPX,
    SELL_PRICE_STRAT_CHPDPE_CEITMPX,
    COGS_STRAT_CHPDPE_CEITMPX,
    CALC_CURRENT_CATALOG_PRICE,
    CALC_CURRENT_CATALOG_PRICE_CHANGE_TMSTP,
    CALC_PREV_CATALOG_PRICE,
    CALC_PREV_CATALOG_PRICE_CHANGE_TMSTP,
    CALC_CURRENT_RTL_PRICE_ZVSR,
    CALC_CURRENT_RTL_PRICE_ZVSR_CHANGE_TMSTP,
    CALC_PREV_RTL_PRICE_ZVSR,
    CALC_PREV_RTL_PRICE_ZVSR_CHANGE_TMSTP,
    CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU,
    CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU_CHANGE_TMSTP,
    CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU,
    CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU_CHANGE_TMSTP,
    CALC_CURRENT_CONTRACT_PRICE_ZVBS,
    CALC_CURRENT_CONTRACT_PRICE_ZVBS_CHANGE_TMSTP,
    CALC_PREV_CONTRACT_PRICE_ZVBS,
    CALC_PREV_CONTRACT_PRICE_ZVBS_CHANGE_TMSTP,
    CALC_CURRENT_AFTR_RBT_PRICE_ZVBR,
    CALC_CURRENT_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP,
    CALC_PREV_AFTR_RBT_PRICE_ZVBR,
    CALC_PREV_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP,
    CMPR_ZVB0_CHPDPE_CEITMPX,
    NET_CONTRACT_PRICE_CHPDPE_CEITMPX,
    BASE_PRICE_WORKE_CHPDPE_CEITMPX,
    EXCISE_TAX_ZTF0_CHPDPE_CEITMPX,
    WAC_KZWI1_CHPDPE_CEITMPX,
    AWP_ZREF_CHPDPE_CEITMPX,
    MSRP_ZMSR_CHPDPE_CEITMPX,
    PSTYV_CHPDPE_CEITMPX,
    WRPST_CHPDPE_CEITMPX,
    WRPRPS_CHPDPE_CEITMPX,
    WRPCALCTYP_CHPDPE_CEITMPX,
    KBETR_CHPDPE_CEITMPX,
    INSTANT_RBT_ZVF0_CHPDPE_CEITMPX,
    CONSIGNMENT_MKUP_ZDP6_CHPDPE_CEITMPX,
    REBATE_ELIGIBLE_FLG_CHPDPE_CEITMPX,
    OE_REP_FLAG_CHPDPE_CEITMPX,
    EXT_PLANT_CHPDPE_CEITMPX,
    CREATED_ON_CHPDPE_CEITMPX,
    CREATED_BY_CHPDPE_CEITMPX,
    CHANGED_ON_CHPDPE_CEITMPX,
    CHANGED_BY_CHPDPE_CEITMPX,
    ATTR_INGST_TIMESTAMP_CHPDPE_CEITMPX,
    --DK: added for incremental load
    ATTR_INGST_SEQ_CHPDPE_CEITMPX,
    --DK: added for incremental load
    ROW_INSERT_TIMESTAMP,
    --HK:added
    ROW_UPDATE_TIMESTAMP --HK:added
    )
VALUES
  ( sub.CLIENT, sub.KUNNR, sub.VKORG, sub.VTWEG, sub.SPART, sub.MATNR,
    CASE
      WHEN sub.changed_on = 0 THEN '1900-12-31'
    ELSE
    PARSE_DATE( '%Y%m%d',
      SUBSTR( CAST(sub.changed_on AS STRING), 0, 8 ) )
  END
    , PARSE_DATE('%Y-%m-%d',
      '1999-12-31'), "Y", sub.CATLG_PRICED_AT_KUNNR, sub.RTL_PRICED_AT_KUNNR, sub.SOURCE_DIVISION, sub.PRICE_DIVISION, sub.PRIMARY_BU, sub.WERKS, sub.WIN_CONTRACT, sub.HIERCY, sub.PREFR, sub.PCTYP, sub.CN_SEG_GROUP, sub.NON_CN_SEG_GROUP, sub.SELL_PRICE_STRAT, sub.COGS_STRAT, sub.CATALOG_PRICE,
    CASE
      WHEN SAFE.PARSE_DATETIME( '%Y%m%d%H%M%S', ( CONCAT( SUBSTR( sub.last_catlg_price_chg_stp, 0, 4 ), CONCAT( SUBSTR( sub.last_catlg_price_chg_stp, 6, 2 ), CONCAT( SUBSTR( sub.last_catlg_price_chg_stp, 9, 2 ), CONCAT( SUBSTR( sub.last_catlg_price_chg_stp, 12, 2 ), CONCAT( SUBSTR( sub.last_catlg_price_chg_stp, 15, 2 ), SUBSTR( sub.last_catlg_price_chg_stp, 18, 2 ) ) ) ) ) ) ) ) IS NULL THEN '1900-12-31 00:00:00'
    ELSE
    PARSE_DATETIME( '%Y%m%d%H%M%S',
      ( CONCAT( SUBSTR( sub.last_catlg_price_chg_stp, 0, 4 ), CONCAT( SUBSTR( sub.last_catlg_price_chg_stp, 6, 2 ), CONCAT( SUBSTR( sub.last_catlg_price_chg_stp, 9, 2 ), CONCAT( SUBSTR( sub.last_catlg_price_chg_stp, 12, 2 ), CONCAT( SUBSTR( sub.last_catlg_price_chg_stp, 15, 2 ), SUBSTR( sub.last_catlg_price_chg_stp, 18, 2 ) ) ) ) ) ) ) )
  END
    , NULL, NULL, sub.RTL_PRICE_ZVSR,
    CASE
      WHEN sub.changed_on = 0 THEN '1900-12-31 00:00:00'
    ELSE
    PARSE_DATETIME( '%Y%m%d%H%M%S',
      SUBSTR( CAST(sub.changed_on AS STRING), 0, 14 ) )
  END
    , NULL, NULL, sub.RTL_SELL_UNT_PRICE_ZVSU,
    CASE
      WHEN sub.changed_on = 0 THEN '1900-12-31 00:00:00'
    ELSE
    PARSE_DATETIME( '%Y%m%d%H%M%S',
      SUBSTR( CAST(sub.changed_on AS STRING), 0, 14 ) )
  END
    , NULL, NULL, sub.CONTRACT_PRICE_ZVBS,
    CASE
      WHEN sub.changed_on = 0 THEN '1900-12-31 00:00:00'
    ELSE
    PARSE_DATETIME( '%Y%m%d%H%M%S',
      SUBSTR( CAST(sub.changed_on AS STRING), 0, 14 ) )
  END
    , NULL, NULL, sub.AFTR_RBT_PRICE_ZVBR,
    CASE
      WHEN sub.changed_on = 0 THEN '1900-12-31 00:00:00'
    ELSE
    PARSE_DATETIME( '%Y%m%d%H%M%S',
      SUBSTR( CAST(sub.changed_on AS STRING), 0, 14 ) )
  END
    , NULL, NULL, sub.CMPR_ZVB0, sub.NET_CONTRACT_PRICE, sub.BASE_PRICE_WORKE, sub.EXCISE_TAX_ZTF0, sub.WAC_KZWI1, sub.AWP_ZREF, sub.MSRP_ZMSR, sub.PSTYV, sub.WRPST, sub.WRPRPS, sub.WRPCALCTYP, sub.KBETR, sub.INSTANT_RBT_ZVF0, sub.CONSIGNMENT_MKUP_ZDP6, sub.REBATE_ELIGIBLE_FLG, sub.OE_REP_FLAG, sub.EXT_PLANT, sub.CREATED_ON, sub.CREATED_BY, sub.CHANGED_ON, sub.CHANGED_BY, sub.ATTR_INGST_TIMESTAMP, --DK: added for incremental load
    sub.ATTR_INGST_SEQ, --DK: added for incremental load
    current_datetime(), NULL );
  --HK --Added update statement to update row in target table  if there is any change in the columns values from source ,except existing price columns(5)
UPDATE
  `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST` a
SET
  NET_CONTRACT_PRICE_CHPDPE_CEITMPX = b.NET_CONTRACT_PRICE,
  base_price_worke_CHPDPE_CEITMPX = b.base_price_worke,
  CMPR_ZVB0_CHPDPE_CEITMPX = b.CMPR_ZVB0,
  AWP_ZREF_CHPDPE_CEITMPX = b.AWP_ZREF,
  MSRP_ZMSR_CHPDPE_CEITMPX = b.MSRP_ZMSR,
  CATLG_PRICED_AT_KUNNR_CHPDPE_CEITMPX = b.CATLG_PRICED_AT_KUNNR,
  RTL_PRICED_AT_KUNNR_CHPDPE_CEITMPX = b.RTL_PRICED_AT_KUNNR,
  SOURCE_DIVISION_CHPDPE_CEITMPX = b.SOURCE_DIVISION,
  PRICE_DIVISION_CHPDPE_CEITMPX = b.PRICE_DIVISION,
  PRIMARY_BU_CHPDPE_CEITMPX = b.PRIMARY_BU,
  WERKS_CHPDPE_CEITMPX = b.WERKS,
  WIN_CONTRACT_CHPDPE_CEITMPX = b.WIN_CONTRACT,
  HIERCY_CHPDPE_CEITMPX = b.HIERCY,
  PREFR_CHPDPE_CEITMPX = b.PREFR,
  PCTYP_CHPDPE_CEITMPX = b.PCTYP,
  CN_SEG_GROUP_CHPDPE_CEITMPX = b.CN_SEG_GROUP,
  NON_CN_SEG_GROUP_CHPDPE_CEITMPX = b.NON_CN_SEG_GROUP,
  SELL_PRICE_STRAT_CHPDPE_CEITMPX = b.SELL_PRICE_STRAT,
  COGS_STRAT_CHPDPE_CEITMPX = b.COGS_STRAT,
  EXCISE_TAX_ZTF0_CHPDPE_CEITMPX = b.EXCISE_TAX_ZTF0,
  WAC_KZWI1_CHPDPE_CEITMPX = b.WAC_KZWI1,
  PSTYV_CHPDPE_CEITMPX = b.PSTYV,
  WRPST_CHPDPE_CEITMPX = b.WRPST,
  WRPRPS_CHPDPE_CEITMPX = b.WRPRPS,
  WRPCALCTYP_CHPDPE_CEITMPX = b.WRPCALCTYP,
  KBETR_CHPDPE_CEITMPX = b.KBETR,
  INSTANT_RBT_ZVF0_CHPDPE_CEITMPX = b.INSTANT_RBT_ZVF0,
  CONSIGNMENT_MKUP_ZDP6_CHPDPE_CEITMPX = b.CONSIGNMENT_MKUP_ZDP6,
  REBATE_ELIGIBLE_FLG_CHPDPE_CEITMPX = b.REBATE_ELIGIBLE_FLG,
  OE_REP_FLAG_CHPDPE_CEITMPX = b.OE_REP_FLAG,
  EXT_PLANT_CHPDPE_CEITMPX = b.EXT_PLANT,
  ROW_UPDATE_TIMESTAMP=current_datetime() --HK :added
FROM (
  SELECT
    --HK:select the rows if there is no changes in any of the core price and change in the any of the base price cols
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`CLIENT` AS join_key1,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`KUNNR` AS join_key2,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`VKORG` AS join_key3,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`VTWEG` AS join_key4,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`SPART` AS join_key5,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.`MATNR` AS join_key6,
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.*
  FROM
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`
  JOIN
    `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`
  ON
    ( `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.CLIENT = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CLIENT_CHPDPE_CEITMPX
      AND `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.KUNNR = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.KUNNR_CHPDPE_CEITMPX
      AND `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.VKORG = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.VKORG_CHPDPE_CEITMPX
      AND `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.VTWEG = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.VTWEG_CHPDPE_CEITMPX
      AND `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.SPART = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.SPART_CHPDPE_CEITMPX
      AND `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.MATNR = `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.MATNR_CHPDPE_CEITMPX )
  WHERE
    --Total 35 cols are campared ,excluded NULLs ,keys,5 price keys cols,calculations for timestamp
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`._PARTITIONTIME >= v_part_date --HK:added for partition
    AND v_attr_ingst_timestamp_src >= v_attr_ingst_timestamp_trgt --DK: added for incremental load
    AND `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CALC_CURRENT_FLAG = 'Y'
    AND ( `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.net_contract_price <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.net_contract_price_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.base_price_worke <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.base_price_worke_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.CMPR_ZVB0 <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CMPR_ZVB0_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.AWP_ZREF <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.AWP_ZREF_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.MSRP_ZMSR <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.MSRP_ZMSR_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.CATLG_PRICED_AT_KUNNR <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CATLG_PRICED_AT_KUNNR_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.RTL_PRICED_AT_KUNNR <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.RTL_PRICED_AT_KUNNR_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.SOURCE_DIVISION <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.SOURCE_DIVISION_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.PRICE_DIVISION <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.PRICE_DIVISION_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.PRIMARY_BU <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.PRIMARY_BU_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.WERKS <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.WERKS_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.WIN_CONTRACT <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.WIN_CONTRACT_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.HIERCY <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.HIERCY_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.PREFR <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.PREFR_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.PCTYP <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.PCTYP_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.CN_SEG_GROUP <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CN_SEG_GROUP_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.NON_CN_SEG_GROUP <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.NON_CN_SEG_GROUP_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.SELL_PRICE_STRAT <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.SELL_PRICE_STRAT_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.COGS_STRAT <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.COGS_STRAT_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.EXCISE_TAX_ZTF0 <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.EXCISE_TAX_ZTF0_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.WAC_KZWI1 <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.WAC_KZWI1_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.PSTYV <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.PSTYV_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.WRPST <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.WRPST_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.WRPRPS <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.WRPRPS_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.WRPCALCTYP <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.WRPCALCTYP_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.KBETR <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.KBETR_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.INSTANT_RBT_ZVF0 <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.INSTANT_RBT_ZVF0_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.CONSIGNMENT_MKUP_ZDP6 <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.CONSIGNMENT_MKUP_ZDP6_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.REBATE_ELIGIBLE_FLG <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.REBATE_ELIGIBLE_FLG_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.OE_REP_FLAG <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.OE_REP_FLAG_CHPDPE_CEITMPX
      OR `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX`.EXT_PLANT <> `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST`.EXT_PLANT_CHPDPE_CEITMPX ) ) b
WHERE
  a.CALC_CURRENT_FLAG = 'Y'
  AND a.CLIENT_CHPDPE_CEITMPX = b.CLIENT
  AND a.KUNNR_CHPDPE_CEITMPX = b.KUNNR
  AND a.VKORG_CHPDPE_CEITMPX = b.VKORG
  AND a.VTWEG_CHPDPE_CEITMPX = b.VTWEG
  AND a.SPART_CHPDPE_CEITMPX = b.SPART
  AND a.MATNR_CHPDPE_CEITMPX = b.MATNR;
UPDATE
  `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST` a
SET
  CALC_PREV_CATALOG_PRICE =
  CASE
    WHEN ( b.CALC_CURRENT_CATALOG_PRICE <> b.CALC_PREV_CATALOG_PRICE1 ) THEN b.CALC_PREV_CATALOG_PRICE1
  ELSE
  b.CALC_PREV_CATALOG_PRICE2
END
  ,
  CALC_PREV_CATALOG_PRICE_CHANGE_TMSTP =
  CASE
    WHEN ( b.CALC_CURRENT_CATALOG_PRICE <> b.CALC_PREV_CATALOG_PRICE1 ) THEN b.CALC_CURRENT_CATALOG_PRICE_CHANGE_TMSTP1
  ELSE
  b.CALC_PREV_CATALOG_PRICE_CHANGE_TMSTP1
END
  ,
  CALC_PREV_RTL_PRICE_ZVSR =
  CASE
    WHEN ( b.CALC_CURRENT_RTL_PRICE_ZVSR <> b.CALC_PREV_RTL_PRICE_ZVSR1 ) THEN b.CALC_PREV_RTL_PRICE_ZVSR1
  ELSE
  b.CALC_PREV_RTL_PRICE_ZVSR2
END
  ,
  CALC_PREV_RTL_PRICE_ZVSR_CHANGE_TMSTP =
  CASE
    WHEN ( b.CALC_CURRENT_RTL_PRICE_ZVSR <> b.CALC_PREV_RTL_PRICE_ZVSR1 ) THEN b.CALC_CURRENT_RTL_PRICE_ZVSR_CHANGE_TMSTP
  ELSE
  b.CALC_PREV_RTL_PRICE_ZVSR_CHANGE_TMSTP1
END
  ,
  CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU =
  CASE
    WHEN ( b.CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU <> b.CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU1 ) THEN b.CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU1
  ELSE
  b.CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU2
END
  ,
  CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU_CHANGE_TMSTP =
  CASE
    WHEN ( b.CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU <> b.CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU1 ) THEN b.CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU_CHANGE_TMSTP
  ELSE
  b.CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU_CHANGE_TMSTP1
END
  ,
  CALC_PREV_CONTRACT_PRICE_ZVBS =
  CASE
    WHEN ( b.CALC_CURRENT_CONTRACT_PRICE_ZVBS <> b.CALC_PREV_CONTRACT_PRICE_ZVBS1 ) THEN b.CALC_PREV_CONTRACT_PRICE_ZVBS1
  ELSE
  b.CALC_PREV_CONTRACT_PRICE_ZVBS2
END
  ,
  CALC_PREV_CONTRACT_PRICE_ZVBS_CHANGE_TMSTP =
  CASE
    WHEN ( b.CALC_CURRENT_CONTRACT_PRICE_ZVBS <> b.CALC_PREV_CONTRACT_PRICE_ZVBS1 ) THEN b.CALC_CURRENT_CONTRACT_PRICE_ZVBS_CHANGE_TMSTP
  ELSE
  b.CALC_PREV_CONTRACT_PRICE_ZVBS_CHANGE_TMSTP1
END
  ,
  CALC_PREV_AFTR_RBT_PRICE_ZVBR =
  CASE
    WHEN ( b.CALC_CURRENT_AFTR_RBT_PRICE_ZVBR <> b.CALC_PREV_AFTR_RBT_PRICE_ZVBR1 ) THEN b.CALC_PREV_AFTR_RBT_PRICE_ZVBR1
  ELSE
  b.CALC_PREV_AFTR_RBT_PRICE_ZVBR2
END
  ,
  CALC_PREV_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP =
  CASE
    WHEN ( b.CALC_CURRENT_AFTR_RBT_PRICE_ZVBR <> b.CALC_PREV_AFTR_RBT_PRICE_ZVBR1 ) THEN b.CALC_CURRENT_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP
  ELSE
  b.CALC_PREV_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP1
END
  ,
  ROW_UPDATE_TIMESTAMP=current_datetime()
FROM (
  SELECT
    HISTORY.CLIENT_CHPDPE_CEITMPX,
    HISTORY.KUNNR_CHPDPE_CEITMPX,
    HISTORY.VKORG_CHPDPE_CEITMPX,
    HISTORY.VTWEG_CHPDPE_CEITMPX,
    HISTORY.SPART_CHPDPE_CEITMPX,
    HISTORY.MATNR_CHPDPE_CEITMPX,
    HISTORY.CALC_EFFECTIVE_START_DATE,
    HISTORY.CALC_CURRENT_FLAG,
    HISTORY.CALC_CURRENT_CATALOG_PRICE,
    HISTORY.CALC_PREV_CATALOG_PRICE,
    HISTORY.CALC_PREV_CATALOG_PRICE_CHANGE_TMSTP,
    HISTORY.CALC_CURRENT_CATALOG_PRICE_CHANGE_TMSTP,
    HISTORY.CALC_PREV_RTL_PRICE_ZVSR,
    HISTORY.CALC_PREV_RTL_PRICE_ZVSR_CHANGE_TMSTP,
    HISTORY.CALC_CURRENT_RTL_PRICE_ZVSR_CHANGE_TMSTP,
    HISTORY.CALC_CURRENT_RTL_PRICE_ZVSR,
    HISTORY.CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU,
    HISTORY.CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU_CHANGE_TMSTP,
    HISTORY.CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU,
    HISTORY.CALC_CURRENT_CONTRACT_PRICE_ZVBS,
    HISTORY.CALC_CURRENT_CONTRACT_PRICE_ZVBS_CHANGE_TMSTP,
    HISTORY.CALC_PREV_CONTRACT_PRICE_ZVBS,
    HISTORY.CALC_PREV_AFTR_RBT_PRICE_ZVBR,
    HISTORY.CALC_PREV_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP,
    HISTORY.CALC_CURRENT_AFTR_RBT_PRICE_ZVBR,
    HISTORY.CALC_CURRENT_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP,
    ( LEAD( HISTORY.CALC_CURRENT_CATALOG_PRICE, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_PREV_CATALOG_PRICE1,
    ( LEAD(HISTORY.CALC_PREV_CATALOG_PRICE, 1) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_PREV_CATALOG_PRICE2,
    ( LEAD( HISTORY.CALC_PREV_CATALOG_PRICE_CHANGE_TMSTP, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_PREV_CATALOG_PRICE_CHANGE_TMSTP1,
    ( LEAD( HISTORY.CALC_CURRENT_CATALOG_PRICE_CHANGE_TMSTP, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_CURRENT_CATALOG_PRICE_CHANGE_TMSTP1,
    ( LEAD( HISTORY.CALC_CURRENT_RTL_PRICE_ZVSR, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_PREV_RTL_PRICE_ZVSR1,
    ( LEAD(HISTORY.CALC_PREV_RTL_PRICE_ZVSR, 1) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_PREV_RTL_PRICE_ZVSR2,
    ( LEAD( HISTORY.CALC_CURRENT_RTL_PRICE_ZVSR_CHANGE_TMSTP, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_CURRENT_RTL_PRICE_ZVSR_CHANGE_TMSTP1,
    ( LEAD( HISTORY.CALC_PREV_RTL_PRICE_ZVSR_CHANGE_TMSTP, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_PREV_RTL_PRICE_ZVSR_CHANGE_TMSTP1,
    LEAD( HISTORY.CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) AS CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU1,
    LEAD( HISTORY.CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) AS CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU2,
    ( LEAD( HISTORY.CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU_CHANGE_TMSTP, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_CURRENT_RTL_SELL_UNT_PRICE_ZVSU_CHANGE_TMSTP1,
    ( LEAD( HISTORY.CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU_CHANGE_TMSTP, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_PREV_RTL_SELL_UNT_PRICE_ZVSU_CHANGE_TMSTP1,
    LEAD( HISTORY.CALC_CURRENT_CONTRACT_PRICE_ZVBS, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) AS CALC_PREV_CONTRACT_PRICE_ZVBS1,
    LEAD( HISTORY.CALC_PREV_CONTRACT_PRICE_ZVBS, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) AS CALC_PREV_CONTRACT_PRICE_ZVBS2,
    ( LEAD( HISTORY.CALC_CURRENT_CONTRACT_PRICE_ZVBS_CHANGE_TMSTP, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_CURRENT_CONTRACT_PRICE_ZVBS_CHANGE_TMSTP1,
    ( LEAD( HISTORY.CALC_PREV_CONTRACT_PRICE_ZVBS_CHANGE_TMSTP, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_PREV_CONTRACT_PRICE_ZVBS_CHANGE_TMSTP1,
    LEAD( HISTORY.CALC_CURRENT_AFTR_RBT_PRICE_ZVBR, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) AS CALC_PREV_AFTR_RBT_PRICE_ZVBR1,
    LEAD( HISTORY.CALC_PREV_AFTR_RBT_PRICE_ZVBR, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) AS CALC_PREV_AFTR_RBT_PRICE_ZVBR2,
    ( LEAD( HISTORY.CALC_CURRENT_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_CURRENT_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP1,
    ( LEAD( HISTORY.CALC_PREV_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP, 1 ) OVER (PARTITION BY HISTORY.CLIENT_CHPDPE_CEITMPX, HISTORY.KUNNR_CHPDPE_CEITMPX, HISTORY.VKORG_CHPDPE_CEITMPX, HISTORY.VTWEG_CHPDPE_CEITMPX, HISTORY.SPART_CHPDPE_CEITMPX, HISTORY.MATNR_CHPDPE_CEITMPX ORDER BY HISTORY.CALC_EFFECTIVE_START_DATE DESC ) ) AS CALC_PREV_AFTR_RBT_PRICE_ZVBR_CHANGE_TMSTP1
  FROM (
    SELECT
      --HK :Added to pick lattest two records based on effective start date in desc order
      *
    FROM (
      SELECT
        t1.*,
        ROW_NUMBER() OVER (PARTITION BY CLIENT_CHPDPE_CEITMPX, KUNNR_CHPDPE_CEITMPX, VKORG_CHPDPE_CEITMPX, VTWEG_CHPDPE_CEITMPX, SPART_CHPDPE_CEITMPX, MATNR_CHPDPE_CEITMPX ORDER BY CALC_EFFECTIVE_START_DATE DESC ) AS row_num
      FROM
        `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST` t1 ) a
    WHERE
      row_num <= 2 ) AS HISTORY
  INNER JOIN
    `datamarket-np-cah.SI_SOH_SAP.CHPDPE_CEITMPX` AS SOURCE1
  ON
    ( HISTORY.CLIENT_CHPDPE_CEITMPX = SOURCE1.CLIENT
      AND HISTORY.KUNNR_CHPDPE_CEITMPX = SOURCE1.KUNNR
      AND HISTORY.VKORG_CHPDPE_CEITMPX = SOURCE1.VKORG
      AND HISTORY.VTWEG_CHPDPE_CEITMPX = SOURCE1.VTWEG
      AND HISTORY.SPART_CHPDPE_CEITMPX = SOURCE1.SPART
      AND HISTORY.MATNR_CHPDPE_CEITMPX = SOURCE1.MATNR )
  WHERE
    source1._PARTITIONTIME >= v_part_date --HK:added for partition
    AND v_attr_ingst_timestamp_src >= v_attr_ingst_timestamp_trgt --DK: added for incremental load
    ) b
WHERE
  ( a.CLIENT_CHPDPE_CEITMPX = b.CLIENT_CHPDPE_CEITMPX
    AND a.KUNNR_CHPDPE_CEITMPX = b.KUNNR_CHPDPE_CEITMPX
    AND a.VKORG_CHPDPE_CEITMPX = b.VKORG_CHPDPE_CEITMPX
    AND a.VTWEG_CHPDPE_CEITMPX = b.VTWEG_CHPDPE_CEITMPX
    AND a.SPART_CHPDPE_CEITMPX = b.SPART_CHPDPE_CEITMPX
    AND a.MATNR_CHPDPE_CEITMPX = b.MATNR_CHPDPE_CEITMPX )
  AND b.CALC_CURRENT_FLAG = 'Y'
  AND a.CALC_CURRENT_FLAG = 'Y';
SET
  v_end_time = current_datetime(); --HK :added
INSERT INTO
  `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST_LOG`
SELECT
  v_start_time,
  v_end_time,
  'SUCCESS',
  NULL,
  NULL,
  NULL; EXCEPTION
    WHEN ERROR THEN --HK --Added exception block
INSERT INTO `datamarket-np-cah.SMNTC_PRICING_ANALYTICS_FACT.FACT_ITEM_PRICE_LIST_LOG`( start_date, end_date, status, err_msg, err_st_txt, err_st_trc ) ( SELECT current_datetime(), current_datetime(), 'FAILED', @@error.message, @@error.statement_text, @@error.formatted_stack_trace );
END;